[user]
	name = S. Amir Mohammad Najafi
  email = njfamirm@gmail.com

[alias]
  l = log --oneline -10 -- # short log
  fl = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit -- # full log
  co = checkout
  cof = checkout --
  sw = switch
  a = add
  st = stash -u
  stp = stash pop 
  c = commit -S -m
	cm = commit -S --amend
	cmn = commit -S --amend --no-edit
  pl = pull --prune --progress --autostash --rebase
  cl = clone
  p = push
	pa = pull --all
  s = status -s
  f = fetch
  r = rebase
  rc = rebase --continue
  ra = rebase --abort
  fa = fetch -a
  b = branch
	ba = branch -avv
  chp = cherry-pick
  feat = !"git fetch origin; git switch -c feat/$1 origin/next #"
  cb = "!git fetch -p && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == \"[gone]\" {sub(\"refs/heads/\", \"\", $1); print $1}'); do git branch -D $branch; done" # clean branch
  rn = !"git pl && git rebase origin/next && git push -f"
  rs = reset
  rshead = reset HEAD --
	rsh = reset --hard
  d = diff --color --color-words --abbrev

[help]
  autocorrect = 1

[push]
	default = current
  rebase = false

[color]
  ui = auto
[color "branch"]
  current = cyan bold reverse
  local = white
  plain =
  remote = cyan
[color "diff"]
  commit =
  func = cyan
  plain =
  whitespace = magenta reverse
  meta = white
  frag = cyan bold reverse
  old = red
  new = green
[color "grep"]
  context =
  filename =
  function =
  linenumber = white
  match =
  selected =
  separator =
[color "interactive"]
  error =
  header =
  help =
  prompt =
[color "status"]
  added = green
  changed = white
  header =
  localBranch =
  nobranch =
  remoteBranch = cyan bold
  unmerged = magenta bold reverse
  untracked = red
  updated = green bold

[init]
	defaultBranch = main

[core]
  pager = less -FRX
	editor = vim
  autocrlf = input

[advice]
	addEmptyPathspec = false

[pull]
	rebase = false

[gpg]
  # FIXME:
	program = /opt/homebrew/bin/gpg

[commit]
	gpgSign = true
[fetch]
	prune = true
